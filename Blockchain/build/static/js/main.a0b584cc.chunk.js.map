{"version":3,"sources":["constants.js","components/Address.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","helpers/rpc.js","components/Balance.jsx","components/Blockie.jsx","components/AddressInput.jsx","components/WalletImport.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Events.jsx","components/Faucet.jsx","components/Header.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","views/Home.jsx","views/ExampleUI.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","hooks/GasPrice.js","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","process","REACT_APP_INFURA_KEY","ALCHEMY_KEY","REACT_APP_ALCHEMY_KEY","ETHERSCAN_KEY","REACT_APP_ETHERSCAN_API_KEY","BLOCKNATIVE_DAPPID","REACT_APP_BLOCKNATIVE_DAPP_ID","RPC_POLL_TIME","REACT_APP_HARDHAT_HOST","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","REACT_APP_CODESPACES","window","location","hostname","replace","global","mainnet","goerli","faucet","sepolia","gnosis","price","gasPrice","zksyncalpha","chiado","polygon","mumbai","localOptimismL1","localOptimism","goerliOptimism","optimism","goerliArbitrum","arbitrum","devnetArbitrum","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","moonbeam","moonriver","moonbaseAlpha","moonbeamDevNode","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","ethers","require","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","provider","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","utils","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","SafeAppWeb3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","getRPCPollTime","_network","Balance","useState","dollarMode","setDollarMode","padding","cursor","onClick","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","WalletImport","setShowImport","importMnemonic","setImportMnemonic","importMnemonicIndex","setImportMnemonicIndex","password","setPassword","importPrivatekey","setImportPrivatekey","importAddress","setImportAddress","useEffect","ethersSeed","mnemonicToSeed","ethersHDNode","HDNode","fromSeed","fullPath","ethersDerivedHDNode","derivePath","ethersPrivateKey","privateKey","calculatePK","officialEthersWallet","Wallet","calculateAddress","opacity","Password","disabled","height","float","currentPrivateKey","localStorage","getItem","setItem","Date","now","trim","reload","marginRight","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","toAddress","setToAddress","pk","setPK","showImport","providerSend","title","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","fullLink","el","document","createElement","appendChild","select","execCommand","removeChild","success","createRandom","_signingKey","visible","paddingRight","dollarMultiplier","onOk","onCancel","footer","type","loading","parseEther","parseFloat","toFixed","to","SendOutlined","Account","accountButtonInfo","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","cachedProvider","action","marginLeft","shape","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","fn","handleForm","returned","buttonIcon","stateMutability","defaultValue","bordered","args","baseType","overrides","noContractDisplay","className","borderRadius","fontWeight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","contractDisplay","contractFuncInfo","contractFunc","connect","Events","contractName","eventName","startBlock","events","useEventListener","paddingBottom","dataSource","renderItem","item","Item","blockNumber","sender","purpose","Title","Header","link","subTitle","justifyContent","flexDirection","flex","alignItems","children","defaultProps","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","localProviderPollingTime","yourLocalBalance","useBalance","faucetTx","useGasPrice","faucetHint","formatEther","Home","readContracts","useContractReader","ExampleUI","writeContracts","newPurpose","setNewPurpose","border","YourContract","setPurpose","update","status","gasUsed","gas","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","d","toISOString","deployWarning","purposes","columns","rowKey","fetcher","graphQLParams","fetch","subgraphUri","headers","then","response","json","docExplorerOpen","query","initialNetwork","DEBUG","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","setAddress","selectedNetwork","useLocation","REACT_APP_PROVIDER","mainnetProviderPollingTime","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","speed","setGasPrice","loadGasPrice","hasOwnProperty","axios","get","newGasPrice","catch","usePoller","useUserProviderAndSigner","yourMainnetBalance","deployedContracts","externalContracts","mainnetContracts","myMainnetDAIBalance","requestProvider","Web3Provider","code","reason","isSafeApp","checkSafeApp","connection","useBurner","lte","selectedKeys","pathname","mode","exact","path","DAI","prevTheme","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","getElementById","module","exports","abi","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"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","file":"static/js/main.a0b584cc.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = process.env.REACT_APP_INFURA_KEY ?? \"6a1612b352e2427abd1c80f665b61ea5\";\r\n// My Alchemy Key, swap in yours from https://dashboard.alchemyapi.io/\r\nexport const ALCHEMY_KEY = process.env.REACT_APP_ALCHEMY_KEY ?? \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\r\n\r\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = process.env.REACT_APP_ETHERSCAN_API_KEY ?? \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = process.env.REACT_APP_BLOCKNATIVE_DAPP_ID ?? \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\n// Docker Hardhat Host\r\nexport const HARDHAT_HOST = process.env.REACT_APP_HARDHAT_HOST ?? \"http://localhost\";\r\n\r\n/*\r\nDecrease the number of RPC calls by passing this value to hooks\r\nwith pollTime (useContractReader, useBalance, etc.).\r\nSet it to 0 to disable it and make RPC calls \"onBlock\".\r\nNote: this is not used when you are in the local hardhat chain.\r\n*/\r\nexport const RPC_POLL_TIME = 30000;\r\n\r\nconst localRpcUrl = process.env.REACT_APP_CODESPACES\r\n  ? `https://${window.location.hostname.replace(\"3000\", \"8545\")}`\r\n  : \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: localRpcUrl,\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  sepolia: {\r\n    name: \"sepolia\",\r\n    color: \"#87ff65\",\r\n    chainId: 11155111,\r\n    faucet: \"https://faucet.sepolia.dev/\",\r\n    blockExplorer: \"https://sepolia.etherscan.io/\",\r\n    rpcUrl: `https://sepolia.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  gnosis: {\r\n    name: \"gnosis\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc.gnosischain.com\",\r\n    faucet: \"https://gnosisfaucet.com\",\r\n    blockExplorer: \"https://gnosisscan.io\",\r\n  },\r\n  zksyncalpha: {\r\n    name: \"zksyncalpha\",\r\n    color: \"#45488f\",\r\n    chainId: 280,\r\n    rpcUrl: \"https://zksync2-testnet.zksync.dev\",\r\n    blockExplorer: \"https://goerli.explorer.zksync.io/\",\r\n    gasPrice: 100000000,\r\n  },\r\n  chiado: {\r\n    name: \"chiado\",\r\n    color: \"#48a9a6\",\r\n    chainId: 10200,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc.chiadochain.net\",\r\n    faucet: \"https://gnosisfaucet.com\",\r\n    blockExplorer: \"https://blockscout.chiadochain.net\",\r\n  },\r\n  polygon: {\r\n    name: \"polygon\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://polygon-rpc.com/\",\r\n    blockExplorer: \"https://polygonscan.com/\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.polygon.technology/\",\r\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\r\n  },\r\n  localOptimismL1: {\r\n    name: \"localOptimismL1\",\r\n    color: \"#f01a37\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\r\n  },\r\n  localOptimism: {\r\n    name: \"localOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n    gasPrice: 0,\r\n  },\r\n  goerliOptimism: {\r\n    name: \"goerliOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"https://optimism.io\",\r\n    rpcUrl: `https://goerli.optimism.io/`,\r\n    gasPrice: 0,\r\n  },\r\n  optimism: {\r\n    name: \"optimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 10,\r\n    blockExplorer: \"https://optimistic.etherscan.io/\",\r\n    rpcUrl: `https://mainnet.optimism.io`,\r\n  },\r\n  goerliArbitrum: {\r\n    name: \"goerliArbitrum\",\r\n    color: \"#28a0f0\",\r\n    chainId: 421613,\r\n    blockExplorer: \"https://goerli-rollup-explorer.arbitrum.io\",\r\n    rpcUrl: \"https://goerli-rollup.arbitrum.io/rpc/\",\r\n  },\r\n  arbitrum: {\r\n    name: \"arbitrum\",\r\n    color: \"#28a0f0\",\r\n    chainId: 42161,\r\n    blockExplorer: \"https://arbiscan.io/\",\r\n    rpcUrl: \"https://arb1.arbitrum.io/rpc\",\r\n  },\r\n  devnetArbitrum: {\r\n    name: \"devnetArbitrum\",\r\n    color: \"#28a0f0\",\r\n    chainId: 421612,\r\n    blockExplorer: \"https://nitro-devnet-explorer.arbitrum.io/\",\r\n    rpcUrl: \"https://nitro-devnet.arbitrum.io/rpc\",\r\n  },\r\n  localAvalanche: {\r\n    name: \"localAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43112,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  fujiAvalanche: {\r\n    name: \"fujiAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43113,\r\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\r\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  mainnetAvalanche: {\r\n    name: \"mainnetAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43114,\r\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\r\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  testnetHarmony: {\r\n    name: \"testnetHarmony\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666700000,\r\n    blockExplorer: \"https://explorer.pops.one/\",\r\n    rpcUrl: `https://api.s0.b.hmny.io`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  mainnetHarmony: {\r\n    name: \"mainnetHarmony\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666600000,\r\n    blockExplorer: \"https://explorer.harmony.one/\",\r\n    rpcUrl: `https://api.harmony.one`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  fantom: {\r\n    name: \"fantom\",\r\n    color: \"#1969ff\",\r\n    chainId: 250,\r\n    blockExplorer: \"https://ftmscan.com/\",\r\n    rpcUrl: `https://rpcapi.fantom.network`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  testnetFantom: {\r\n    name: \"testnetFantom\",\r\n    color: \"#1969ff\",\r\n    chainId: 4002,\r\n    blockExplorer: \"https://testnet.ftmscan.com/\",\r\n    rpcUrl: `https://rpc.testnet.fantom.network`,\r\n    gasPrice: 1000000000,\r\n    faucet: \"https://faucet.fantom.network/\",\r\n  },\r\n  moonbeam: {\r\n    name: \"moonbeam\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1284,\r\n    blockExplorer: \"https://moonscan.io\",\r\n    rpcUrl: \"https://rpc.api.moonbeam.network\",\r\n  },\r\n  moonriver: {\r\n    name: \"moonriver\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1285,\r\n    blockExplorer: \"https://moonriver.moonscan.io/\",\r\n    rpcUrl: \"https://rpc.api.moonriver.moonbeam.network\",\r\n  },\r\n  moonbaseAlpha: {\r\n    name: \"moonbaseAlpha\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1287,\r\n    blockExplorer: \"https://moonbase.moonscan.io/\",\r\n    rpcUrl: \"https://rpc.api.moonbase.moonbeam.network\",\r\n    faucet: \"https://discord.gg/SZNP8bWHZq\",\r\n  },\r\n  moonbeamDevNode: {\r\n    name: \"moonbeamDevNode\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1281,\r\n    blockExplorer: \"https://moonbeam-explorer.netlify.app/\",\r\n    rpcUrl: \"http://127.0.0.1:9933\",\r\n  },\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n","import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\nconst { Text } = Typography;\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n**/\r\n\r\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\r\n\r\nexport default function Address(props) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n  const address = props.value || props.address;\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n  const ensSplit = ens && ens.split(\".\");\r\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\r\n\r\n  if (validEnsCheck) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {props.onChange ? (\r\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        ) : (\r\n          <Text copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        )}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n      var options = null;\r\n      var notify = null;\r\n      options = {\r\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n        system: \"ethereum\",\r\n        networkId: network.chainId,\r\n        // darkMode: Boolean, // (default: false)\r\n        transactionHandler: txInformation => {\r\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n          const possibleFunction = callbacks[txInformation.transaction.hash];\r\n          if (typeof possibleFunction === \"function\") {\r\n            possibleFunction(txInformation.transaction);\r\n          }\r\n        },\r\n      };\r\n\r\n      notify = Notify(options);\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Vote Token Generated\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        if (DEBUG) console.log(e);\r\n        // Accounts for Metamask and default signer on all networks\r\n        let message =\r\n          e.data && e.data.message\r\n            ? e.data.message\r\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\r\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\r\n            : e.data\r\n            ? e.data\r\n            : JSON.stringify(e);\r\n        if (!e.error && e.message) {\r\n          message = e.message;\r\n        }\r\n\r\n        console.log(\"Attempt to clean up:\", message);\r\n        try {\r\n          let obj = JSON.parse(message);\r\n          if (obj && obj.body) {\r\n            let errorObj = JSON.parse(obj.body);\r\n            if (errorObj && errorObj.error && errorObj.error.message) {\r\n              message = errorObj.error.message;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          //ignore\r\n        }\r\n\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import Portis from \"@portis/web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Authereum from \"authereum\";\r\nimport Fortmatic from \"fortmatic\";\r\nimport WalletLink from \"walletlink\";\r\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\r\nimport { SafeAppWeb3Modal } from \"@gnosis.pm/safe-apps-web3modal\";\r\n\r\n// Coinbase walletLink init\r\nconst walletLink = new WalletLink({\r\n  appName: \"coinbase\",\r\n});\r\n\r\n// WalletLink provider\r\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\r\n\r\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\r\n/**\r\n  Web3 modal helps us \"connect\" external wallets:\r\n**/\r\nconst web3ModalSetup = () =>\r\n  new SafeAppWeb3Modal({\r\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\r\n    cacheProvider: true, // optional\r\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\r\n    providerOptions: {\r\n      walletconnect: {\r\n        package: WalletConnectProvider, // required\r\n        options: {\r\n          bridge: \"https://polygon.bridge.walletconnect.org\",\r\n          infuraId: INFURA_ID,\r\n          rpc: {\r\n            10: \"https://mainnet.optimism.io\", // xDai\r\n            100: \"https://rpc.gnosischain.com\", // xDai\r\n            137: \"https://polygon-rpc.com\",\r\n            31337: \"http://localhost:8545\",\r\n            42161: \"https://arb1.arbitrum.io/rpc\",\r\n            80001: \"https://rpc-mumbai.maticvigil.com\",\r\n            71401: \"https://godwoken-testnet-v1.ckbapp.dev\",\r\n          },\r\n        },\r\n      },\r\n      portis: {\r\n        display: {\r\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\r\n          name: \"Portis\",\r\n          description: \"Connect to Portis App\",\r\n        },\r\n        package: Portis,\r\n        options: {\r\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\r\n        },\r\n      },\r\n      fortmatic: {\r\n        package: Fortmatic, // required\r\n        options: {\r\n          key: \"pk_live_5A7C91B2FC585A17\", // required\r\n        },\r\n      },\r\n      // torus: {\r\n      //   package: Torus,\r\n      //   options: {\r\n      //     networkParams: {\r\n      //       host: \"https://localhost:8545\", // optional\r\n      //       chainId: 1337, // optional\r\n      //       networkId: 1337 // optional\r\n      //     },\r\n      //     config: {\r\n      //       buildEnv: \"development\" // optional\r\n      //     },\r\n      //   },\r\n      // },\r\n      \"custom-walletlink\": {\r\n        display: {\r\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\r\n          name: \"Coinbase\",\r\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\r\n        },\r\n        package: walletLinkProvider,\r\n        connector: async (provider, _options) => {\r\n          await provider.enable();\r\n          return provider;\r\n        },\r\n      },\r\n      authereum: {\r\n        package: Authereum, // required\r\n      },\r\n    },\r\n  });\r\n\r\nexport default web3ModalSetup;\r\n","import { create } from \"ipfs-http-client\";\r\nimport { BufferList } from \"bl\";\r\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\r\n\r\nexport async function addToIPFS(file) {\r\n  const fileAdded = await ipfs.add(file);\r\n\r\n  return fileAdded;\r\n}\r\n\r\nexport function urlFromCID(cid) {\r\n  return `https://ipfs.infura.io/ipfs/${cid}`;\r\n}\r\n\r\nexport async function getFromIPFS(hashToGet) {\r\n  for await (const file of ipfs.cat(hashToGet)) {\r\n    const content = new BufferList(file).toString();\r\n\r\n    return content;\r\n  }\r\n}\r\n","import { RPC_POLL_TIME } from \"../constants\";\r\n\r\n// Get the appropriate polling time for a given provider.\r\nexport const getRPCPollTime = provider => {\r\n  // No polling interval on local hardhat chain.\r\n  if (provider?._network?.chainId === 31337) {\r\n    return 0;\r\n  } else {\r\n    return RPC_POLL_TIME;\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useBalance } from \"eth-hooks\";\r\nimport { getRPCPollTime } from \"../helpers\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  // let localProviderPollingTime = getRPCPollTime(props.provider);\r\n\r\n  // const balance = useBalance(props.provider, props.address, localProviderPollingTime);\r\n  // let floatBalance = parseFloat(\"0.00\");\r\n  // let usingBalance = balance;\r\n\r\n  // if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\r\n  // if (typeof props.value !== \"undefined\") usingBalance = props.value;\r\n\r\n  // if (usingBalance) {\r\n  //   const etherBalance = utils.formatEther(usingBalance);\r\n  //   parseFloat(etherBalance).toFixed(2);\r\n  //   floatBalance = parseFloat(etherBalance);\r\n  // }\r\n\r\n  // let displayBalance = floatBalance.toFixed(4);\r\n\r\n  // const price = props.price || props.dollarMultiplier || 1;\r\n\r\n  // if (dollarMode) {\r\n  //   displayBalance = \"$\" + (floatBalance).toFixed(2);\r\n  // }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {/* {displayBalance} */}\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { Badge, Input } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nimport Blockie from \"./Blockie\";\r\n\r\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n**/\r\nexport default function AddressInput(props) {\r\n  const { ensProvider, onChange } = props;\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (isENS(address)) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scan ? (\r\n        <div\r\n          style={{\r\n            zIndex: 256,\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            width: \"100%\",\r\n          }}\r\n          onClick={() => {\r\n            setScan(false);\r\n          }}\r\n        >\r\n          <QrReader\r\n            delay={250}\r\n            resolution={1200}\r\n            onError={e => {\r\n              console.log(\"SCAN ERROR\", e);\r\n              setScan(false);\r\n            }}\r\n            onScan={newValue => {\r\n              if (newValue) {\r\n                console.log(\"SCAN VALUE\", newValue);\r\n                let possibleNewValue = newValue;\r\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\r\n                }\r\n                setScan(false);\r\n                updateAddress(possibleNewValue);\r\n              }\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\r\n        addonAfter={\r\n          <div\r\n            style={{ marginTop: 4, cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setScan(!scan);\r\n            }}\r\n          >\r\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n              <QrcodeOutlined style={{ fontSize: 18 }} />\r\n            </Badge>{\" \"}\r\n            Scan\r\n          </div>\r\n        }\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { Button, Input } from \"antd\";\r\nimport Address from \"./Address\";\r\n\r\nexport default function WalletImport({ setShowImport }) {\r\n  const [importMnemonic, setImportMnemonic] = useState();\r\n  const [importMnemonicIndex, setImportMnemonicIndex] = useState(\"0\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [importPrivatekey, setImportPrivatekey] = useState();\r\n  const [importAddress, setImportAddress] = useState();\r\n\r\n  useEffect(() => {\r\n    const calculatePK = async () => {\r\n      if (importMnemonic) {\r\n        const ethersSeed = ethers.utils.mnemonicToSeed(importMnemonic, password);\r\n        const ethersHDNode = ethers.utils.HDNode.fromSeed(ethersSeed);\r\n\r\n        const wallet_hdpath = \"m/44'/60'/0'/0/\";\r\n        const fullPath = wallet_hdpath + importMnemonicIndex;\r\n\r\n        const ethersDerivedHDNode = ethersHDNode.derivePath(fullPath);\r\n        const ethersPrivateKey = ethersDerivedHDNode.privateKey;\r\n\r\n        setImportPrivatekey(ethersPrivateKey);\r\n      } else {\r\n        setImportPrivatekey();\r\n      }\r\n    };\r\n    calculatePK();\r\n  }, [importMnemonic, importMnemonicIndex, password]);\r\n\r\n  useEffect(() => {\r\n    const calculateAddress = async () => {\r\n      if (importPrivatekey) {\r\n        try {\r\n          const officialEthersWallet = new ethers.Wallet(importPrivatekey);\r\n          console.log(officialEthersWallet);\r\n          setImportAddress(officialEthersWallet.address);\r\n        } catch (e) {\r\n          console.log(e);\r\n          setImportAddress(\"\");\r\n        }\r\n      }\r\n    };\r\n    calculateAddress();\r\n  }, [importPrivatekey]);\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ marginTop: 21, width: 420 }}>\r\n        <h2>IMPORT</h2>\r\n      </div>\r\n\r\n      <div style={{ opacity: 0.5 }}>mnemonic</div>\r\n      <Input.Password\r\n        style={{ width: 380 }}\r\n        size=\"large\"\r\n        placeholder=\"word1 word2 word3\"\r\n        onChange={async e => {\r\n          setImportMnemonic(e.target.value);\r\n        }}\r\n      />\r\n\r\n      <Input\r\n        style={{ width: 69 }}\r\n        value={importMnemonicIndex}\r\n        onChange={e => {\r\n          setImportMnemonicIndex(e.target.value);\r\n        }}\r\n        size=\"large\"\r\n      />\r\n\r\n      <Input.Password\r\n        style={{ width: 380 }}\r\n        size=\"large\"\r\n        placeholder=\"optional password\"\r\n        onChange={async e => {\r\n          setPassword(e.target.value);\r\n        }}\r\n      />\r\n\r\n      <div style={{ marginTop: 21, width: 420 }}>\r\n        <h4>OR</h4>\r\n      </div>\r\n\r\n      <div style={{ opacity: 0.5 }}>private key</div>\r\n      <Input.Password\r\n        disabled={importMnemonic}\r\n        style={{ width: 420 }}\r\n        size=\"large\"\r\n        value={importPrivatekey}\r\n        placeholder=\"0x...\"\r\n        onChange={e => {\r\n          setImportPrivatekey(e.target.value);\r\n        }}\r\n      />\r\n\r\n      <hr />\r\n\r\n      {importAddress ? (\r\n        <div style={{ width: 420, height: 200 }}>\r\n          <div style={{ float: \"right\", marginTop: 64 }}>\r\n            <Address value={importAddress} />\r\n          </div>\r\n          <hr />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div style={{ float: \"right\" }}>\r\n        <Button\r\n          style={{ marginTop: 16 }}\r\n          disabled={!importPrivatekey || (importMnemonic && importMnemonic.length < 7)} //safety third!\r\n          onClick={() => {\r\n            const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n            if (currentPrivateKey) {\r\n              window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n            }\r\n\r\n            try {\r\n              const officialEthersWallet = new ethers.Wallet(importPrivatekey.trim());\r\n              console.log(officialEthersWallet);\r\n              setImportAddress(officialEthersWallet.address);\r\n              window.localStorage.setItem(\"metaPrivateKey\", importPrivatekey);\r\n              window.location.reload();\r\n              //setShowImport(!showImport)\r\n            } catch (e) {\r\n              console.log(e);\r\n            }\r\n          }}\r\n        >\r\n          <span style={{ marginRight: 8 }}>💾</span>Save\r\n        </Button>\r\n      </div>\r\n\r\n      <Button\r\n        style={{ marginTop: 16 }}\r\n        onClick={() => {\r\n          setShowImport(false);\r\n        }}\r\n      >\r\n        <span style={{ marginRight: 8 }}>⏪</span>Cancel\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { Button, message, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\nimport WalletImport from \"./WalletImport\";\r\n\r\nconst { Text } = Typography;\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n**/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const [showImport, setShowImport] = useState();\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Vote access\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: props.padding ? props.padding : 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: props.size ? props.size : 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      const fullLink = \"https://punkwallet.io/pk#\" + pk;\r\n\r\n      display = (\r\n        <div>\r\n          <div>\r\n            <b>Private Key:</b>\r\n            <div>\r\n              <Text style={{ fontSize: 11 }} copyable>\r\n                {pk}\r\n              </Text>\r\n            </div>\r\n\r\n            <div style={{ marginTop: 16 }}>\r\n              <div>\r\n                <b>Punk Wallet:</b>\r\n              </div>\r\n              <Text style={{ fontSize: 11 }} copyable>\r\n                {fullLink}\r\n              </Text>\r\n            </div>\r\n\r\n            <br />\r\n            <i>\r\n              Point your camera phone at qr code to open in &nbsp;\r\n              <a target=\"_blank\" href={fullLink} rel=\"noopener noreferrer\">\r\n                Punk Wallet\r\n              </a>\r\n              :\r\n            </i>\r\n\r\n            <div\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => {\r\n                const el = document.createElement(\"textarea\");\r\n                el.value = fullLink;\r\n                document.body.appendChild(el);\r\n                el.select();\r\n                document.execCommand(\"copy\");\r\n                document.body.removeChild(el);\r\n                message.success(<span style={{ position: \"relative\" }}>Copied Private Key Link</span>);\r\n              }}\r\n            >\r\n              <QR value={fullLink} size=\"450\" level=\"H\" includeMargin renderAs=\"svg\" />\r\n            </div>\r\n          </div>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"Scan Your Face & Enter the ID number\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n    \r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={\r\n          showImport\r\n            ? null\r\n            : [\r\n                \r\n                privateKeyButton,\r\n                receiveButton,\r\n                <Button\r\n                  key=\"submit\"\r\n                  type=\"primary\"\r\n                  disabled={!amount || !toAddress || qr}\r\n                  loading={false}\r\n                  onClick={() => {\r\n                    const tx = Transactor(props.signer || props.provider);\r\n\r\n                    let value;\r\n                    try {\r\n                      value = ethers.utils.parseEther(\"\" + amount);\r\n                    } catch (e) {\r\n                      // failed to parseEther, try something else\r\n                      value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n                    }\r\n\r\n                    tx({\r\n                      to: toAddress,\r\n                      value,\r\n                    });\r\n                    setOpen(!open);\r\n                    setQr();\r\n                  }}\r\n                >\r\n                  <SendOutlined /> Send\r\n                </Button>,\r\n              ]\r\n        }\r\n      >\r\n        {showImport ? <WalletImport setShowImport={setShowImport} /> : display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n    isContract={boolean}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n**/\r\n\r\nexport default function Account({\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n  isContract,\r\n}) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  let accountButtonInfo;\r\n  if (web3Modal?.cachedProvider) {\r\n    accountButtonInfo = { name: \"Logout\", action: logoutOfWeb3Modal };\r\n  } else {\r\n    accountButtonInfo = { name: \"Connect\", action: loadWeb3Modal };\r\n  }\r\n\r\n  const display = !minimized && (\r\n    <span>\r\n      {address && (\r\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={20} />\r\n      )}\r\n      <Balance address={address} provider={localProvider} price={price} size={20} />\r\n      {!isContract && (\r\n        <Wallet\r\n          address={address}\r\n          provider={localProvider}\r\n          signer={userSigner}\r\n          ensProvider={mainnetProvider}\r\n          price={price}\r\n          color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n          size={22}\r\n          padding={\"0px\"}\r\n        />\r\n      )}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      {display}\r\n      {web3Modal && (\r\n        <Button style={{ marginLeft: 8 }} shape=\"round\" onClick={accountButtonInfo.action}>\r\n          {accountButtonInfo.name}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n**/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Address from \"../Address\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\r\n  }\r\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\r\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\r\n    const displayable = JSON.stringify(thing.map(mostReadable));\r\n    return asText ? (\r\n      displayable\r\n    ) : (\r\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\r\n    );\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\r\n\r\nexport { tryToDisplay, tryToDisplayAsText };\r\n","import { Button, Col, Divider, Row } from \"antd\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { tryToDisplay } from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nimport { Transactor } from \"../../helpers\";\r\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\r\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\r\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\r\n};\r\n\r\nconst isReadable = fn => fn.stateMutability === \"view\" || fn.stateMutability === \"pure\";\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const handleForm = returned => {\r\n    if (returned) {\r\n      setForm({});\r\n    }\r\n  };\r\n\r\n  const buttonIcon = isReadable(functionInfo) ? (\r\n    <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n  ) : (\r\n    <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n  );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              const args = functionInfo.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n                let value = form[key];\r\n                if ([\"array\", \"tuple\"].includes(input.baseType)) {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                try {\r\n                  const returned = await contractFunction(...args);\r\n                  handleForm(returned);\r\n                  result = tryToDisplayAsText(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                handleForm(returned);\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"antd\";\r\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport Address from \"../Address\";\r\nimport Balance from \"../Balance\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  show,\r\n  price,\r\n  blockExplorer,\r\n  chainId,\r\n  contractConfig,\r\n}) {\r\n  const contracts = useContractLoader(provider, contractConfig, chainId);\r\n  let contract;\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(() => {\r\n    const results = contract\r\n      ? Object.entries(contract.interface.functions).filter(\r\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\r\n        )\r\n      : [];\r\n    return results;\r\n  }, [contract, show]);\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false);\r\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\r\n    const contractFunc =\r\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\r\n        ? contract[contractFuncInfo[0]]\r\n        : contract.connect(signer)[contractFuncInfo[0]];\r\n\r\n    if (typeof contractFunc === \"function\") {\r\n      if (isQueryable(contractFuncInfo[1])) {\r\n        // If there are no inputs, just display return value\r\n        return (\r\n          <DisplayVariable\r\n            key={contractFuncInfo[1].name}\r\n            contractFunction={contractFunc}\r\n            functionInfo={contractFuncInfo[1]}\r\n            refreshRequired={refreshRequired}\r\n            triggerRefresh={triggerRefresh}\r\n            blockExplorer={blockExplorer}\r\n          />\r\n        );\r\n      }\r\n\r\n      // If there are inputs, display a form to allow users to provide these\r\n      return (\r\n        <FunctionForm\r\n          key={\"FF\" + contractFuncInfo[0]}\r\n          contractFunction={contractFunc}\r\n          functionInfo={contractFuncInfo[1]}\r\n          provider={provider}\r\n          gasPrice={gasPrice}\r\n          triggerRefresh={triggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div style={{ fontSize: 24 }}>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Address value={address} blockExplorer={blockExplorer} />\r\n              <Balance address={address} provider={provider} price={price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { List } from \"antd\";\r\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\r\nimport Address from \"./Address\";\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a lists of events\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Events\r\n    contracts={readContracts}\r\n    contractName=\"YourContract\"\r\n    eventName=\"SetPurpose\"\r\n    localProvider={localProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    startBlock={1}\r\n  />\r\n**/\r\n\r\nexport default function Events({ contracts, contractName, eventName, localProvider, mainnetProvider, startBlock }) {\r\n  // 📟 Listen for broadcast events\r\n  const events = useEventListener(contracts, contractName, eventName, localProvider, startBlock);\r\n\r\n  return (\r\n    <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\r\n      <h2>Results:</h2>\r\n      <List\r\n        bordered\r\n        dataSource={events}\r\n        renderItem={item => {\r\n          return (\r\n            <List.Item key={item.blockNumber + \"_\" + item.args.sender + \"_\" + item.args.purpose}>\r\n              <Address address={item.args[0]} ensProvider={mainnetProvider} fontSize={16} />\r\n              {item.args[1]}\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Input, Tooltip } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n**/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  const { price, placeholder, localProvider, ensProvider } = props;\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (localProvider) {\r\n        const _faucetAddress = await localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const updateAddress = newValue => {\r\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\r\n      setAddress(newValue);\r\n    }\r\n  };\r\n\r\n  const tx = Transactor(localProvider);\r\n\r\n  return (\r\n    <span>\r\n      \r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Title, Text } = Typography;\r\n\r\n// displays a page header\r\n\r\nexport default function Header({ link, title, subTitle, ...props }) {\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"1.2rem\" }}>\r\n      <div style={{ display: \"flex\", flexDirection: \"column\", flex: 1, alignItems: \"start\" }}>\r\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <Title level={4} style={{ margin: \"0 0.5rem 0 0\" }}>\r\n            {title}\r\n          </Title>\r\n        </a>\r\n        <Text type=\"secondary\" style={{ textAlign: \"left\" }}>\r\n          {subTitle}\r\n        </Text>\r\n      </div>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  link: \"\",\r\n  title: \"Election Commision of India\",\r\n  subTitle: \"Secure Blockchain based Voting System\",\r\n};\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst createProvider = async url => {\r\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\r\n\r\n  await p.ready;\r\n\r\n  return p;\r\n};\r\n\r\nexport default function useStaticJsonRPC(urlArray, localProvider = null) {\r\n  const [provider, setProvider] = useState(null);\r\n\r\n  const handleProviders = useCallback(async () => {\r\n    try {\r\n      const p = await Promise.race(urlArray.map(createProvider));\r\n      const _p = await p;\r\n\r\n      setProvider(_p);\r\n    } catch (error) {\r\n      // todo: show notification error about provider issues\r\n      console.log(error);\r\n    }\r\n  }, [urlArray]);\r\n\r\n  useEffect(() => {\r\n    // Re-use the localProvider if it's mainnet (to use only one instance of it)\r\n    if (localProvider && localProvider?._network.chainId === 1) {\r\n      setProvider(localProvider);\r\n      return;\r\n    }\r\n\r\n    handleProviders();\r\n\r\n    // eslint-disable-next-line\r\n  }, [JSON.stringify(urlArray), localProvider]);\r\n\r\n  return provider;\r\n}\r\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\n\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  console.log(\"no call of that name!\");\r\n  return undefined;\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n  const [tokens, setTokens] = useState();\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenListResponse = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenListResponse.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI, _tokenListUri, activeChainId]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n    // eslint-disable-next-line\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { utils, ethers } from \"ethers\";\r\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\r\n\r\nimport { NETWORKS } from \"../constants\";\r\nimport { Transactor } from \"../helpers\";\r\n\r\n/** \r\nThis is a component for bridging between L1 & L2\r\nCurrently it supports Testnet deposits for Arbitrum & Optimism\r\n\r\n __          _______ _____\r\n \\ \\        / /_   _|  __ \\\r\n  \\ \\  /\\  / /  | | | |__) |\r\n   \\ \\/  \\/ /   | | |  ___/\r\n    \\  /\\  /   _| |_| |\r\n     \\/  \\/   |_____|_|\r\n\r\n\r\n**/\r\n\r\nexport default function L2ArbitrumBridge({ address, userSigner }) {\r\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\r\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\r\n  const [L1Provider, setL1Provider] = useState(\"\");\r\n  const [L2Provider, setL2Provider] = useState(\"\");\r\n  const [rollup, setRollup] = useState(\"arbitrum\");\r\n  const [environment] = useState(\"test\");\r\n\r\n  const rollupConfig = {\r\n    arbitrum: {\r\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\r\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\r\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\r\n    },\r\n    optimism: {\r\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\r\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\r\n    },\r\n  };\r\n\r\n  const activeConfig = rollupConfig[rollup][environment];\r\n\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  const tx = Transactor(userSigner);\r\n\r\n  useEffect(() => {\r\n    async function setProviders() {\r\n      const L1 = activeConfig.L1;\r\n      const L2 = activeConfig.L2;\r\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\r\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\r\n      setL1EthBalance(\"...\");\r\n      setL2EthBalance(\"...\");\r\n    }\r\n    setProviders();\r\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\r\n\r\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\r\n\r\n  useOnBlock(L1Provider, async () => {\r\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\r\n    const yourL1Balance = await L1Provider.getBalance(address);\r\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\r\n    const yourL2Balance = await L2Provider.getBalance(address);\r\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\r\n  });\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 12,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"token\",\r\n      key: \"token\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} L1 Balance`,\r\n      dataIndex: \"l1\",\r\n      key: \"l1\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\r\n      dataIndex: \"l2\",\r\n      key: \"l2\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      token: \"ETH\",\r\n      l1: \"Ξ\" + L1EthBalance,\r\n      l2: \"Ξ\" + L2EthBalance,\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onAssetChange = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  async function onFinish(values) {\r\n    console.log(contracts);\r\n    console.log(values.amount.toString());\r\n    console.log(rollup);\r\n    let newTx;\r\n    try {\r\n      if (rollup === \"arbitrum\") {\r\n        newTx = await tx(\r\n          contracts.Inbox.depositEth(1_300_000, {\r\n            value: utils.parseEther(values.amount.toString()),\r\n            gasLimit: 300000,\r\n          }),\r\n        );\r\n      } else if (rollup === \"optimism\") {\r\n        newTx = await tx(\r\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\r\n            value: utils.parseEther(values.amount.toString()),\r\n          }),\r\n        );\r\n      }\r\n      await newTx.wait();\r\n      console.log(\"woop!\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\r\n\r\n  return (\r\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\r\n        <Radio.Group\r\n          value={rollup}\r\n          onChange={e => {\r\n            setRollup(e.target.value);\r\n          }}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\r\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\r\n        </Radio.Group>\r\n\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\r\n\r\n        <Form\r\n          {...formItemLayout}\r\n          form={form}\r\n          name=\"control-hooks\"\r\n          onFinish={onFinish}\r\n          initialValues={{ assetType: \"eth\" }}\r\n        >\r\n          <Form.Item\r\n            name=\"assetType\"\r\n            label=\"Select Asset Type\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\r\n              <Option value=\"eth\">ETH</Option>\r\n              <Option disabled value=\"erc20\">\r\n                ERC-20\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"address\" label=\"Address\">\r\n            <Input disabled placeholder={address} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount to bridge\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\r\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\r\nconst ArbitrumInboxABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"InboxMessageDelivered\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\r\n    name: \"InboxMessageDeliveredFromOrigin\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"WhitelistSourceUpdated\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"bridge\",\r\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\r\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"createRetryableTicket\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\r\n    name: \"depositEth\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"isMaster\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2Message\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2MessageFromOrigin\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"updateWhitelistSource\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"whitelist\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\r\nconst OVM_L1StandardBridgeABI = [\r\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\r\n];\r\n\r\nconst L1BridgeMetadata = {\r\n  // Arbitrium Contract's\r\n  44010: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  4: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  // Optimism Contract's\r\n  31337: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n  42: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { Alert, Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\nimport { NETWORK } from \"../constants\";\r\n\r\nfunction NetworkDisplay({\r\n  NETWORKCHECK,\r\n  localChainId,\r\n  selectedChainId,\r\n  targetNetwork,\r\n  USE_NETWORK_SELECTOR,\r\n  logoutOfWeb3Modal,\r\n}) {\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n\r\n                    let switchTx;\r\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\r\n                    try {\r\n                      switchTx = await ethereum.request({\r\n                        method: \"wallet_switchEthereumChain\",\r\n                        params: [{ chainId: data[0].chainId }],\r\n                      });\r\n                    } catch (switchError) {\r\n                      // not checking specific error code, because maybe we're not using MetaMask\r\n                      try {\r\n                        switchTx = await ethereum.request({\r\n                          method: \"wallet_addEthereumChain\",\r\n                          params: data,\r\n                        });\r\n                      } catch (addError) {\r\n                        // handle \"add\" error\r\n                      }\r\n                    }\r\n\r\n                    if (switchTx) {\r\n                      console.log(switchTx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 150, top: 25, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  console.log({ networkDisplay });\r\n\r\n  return networkDisplay;\r\n}\r\n\r\nexport default NetworkDisplay;\r\n","import { Button } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useBalance, useGasPrice } from \"eth-hooks\";\r\n\r\nimport { getRPCPollTime, Transactor } from \"../helpers\";\r\n\r\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\r\n  const [faucetClicked, setFaucetClicked] = useState(false);\r\n\r\n  const localProviderPollingTime = getRPCPollTime(localProvider);\r\n\r\n  // fetch local balance\r\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\r\n\r\n  // get gas Price from network\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime);\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  let faucetHint = \"\";\r\n\r\n  if (\r\n    !faucetClicked &&\r\n    localProvider &&\r\n    localProvider._network &&\r\n    localProvider._network.chainId === 31337 &&\r\n    yourLocalBalance &&\r\n    ethers.utils.formatEther(yourLocalBalance) <= 0\r\n  ) {\r\n    faucetHint = (\r\n      <div style={{ position: \"absolute\", right: 65, top: 65 }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: ethers.utils.parseEther(\"0.01\"),\r\n            });\r\n            setFaucetClicked(true);\r\n          }}\r\n        >\r\n          Grab Your Vote\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return faucetHint;\r\n}\r\n\r\nexport default FaucetHint;\r\n","import { useContractReader } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/**\r\n * web3 props can be passed from '../App.jsx' into your local view component for use\r\n * @param {*} yourLocalBalance balance on current network\r\n * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/\r\n * @returns react component\r\n **/\r\nfunction Home({ yourLocalBalance, readContracts }) {\r\n  // you can also use hooks locally in your component of choice\r\n  // in this case, let's keep track of 'purpose' variable from our contract\r\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ margin: 32 }}>\r\n        <h1>Ballot Num of Candidates{\" \"}</h1>\r\n        <h3>Party A = 1</h3>\r\n        <h3>Party B = 2</h3>\r\n        <h3>Party C = 3</h3>\r\n        <h3>Party D = 4</h3>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch, Select } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { utils } from \"ethers\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\n\r\nimport { Address, Balance, Events } from \"../components\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function ExampleUI({\r\n  purpose,\r\n  address,\r\n  mainnetProvider,\r\n  localProvider,\r\n  yourLocalBalance,\r\n  price,\r\n  tx,\r\n  readContracts,\r\n  writeContracts,\r\n}) {\r\n  const [newPurpose, setNewPurpose] = useState(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div style={{ margin: 32 }}>\r\n          <h1>Ballot Num of Candidates</h1>\r\n          <h3>Party A = 1</h3>\r\n          <h3>Party B = 2</h3>\r\n          <h3>Party C = 3</h3>\r\n          <h3>Party D = 4</h3>\r\n        </div>\r\n      </div>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\r\n        <h2>Enter the Ballot number:</h2>\r\n        <Divider />\r\n        <div style={{ margin: 8 }}>\r\n          <Select\r\n            onChange={value => {\r\n              setNewPurpose(value);\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          >\r\n            <Option value=\"1\">Party A</Option>\r\n            <Option value=\"2\">Party B</Option>\r\n            <Option value=\"3\">Party C</Option>\r\n            <Option value=\"4\">Party D</Option>\r\n          </Select>\r\n          <Button\r\n            style={{ marginTop: 8 }}\r\n            onClick={async () => {\r\n              const result = tx(writeContracts.YourContract.setPurpose(newPurpose), update => {\r\n                console.log(\"📡 Transaction Update:\", update);\r\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\r\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\r\n                  console.log(\r\n                    \" ⛽️ \" +\r\n                      update.gasUsed +\r\n                      \"/\" +\r\n                      (update.gasLimit || update.gas) +\r\n                      \" @ \" +\r\n                      parseFloat(update.gasPrice) / 1000000000 +\r\n                      \" gwei\",\r\n                  );\r\n                }\r\n              });\r\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\r\n              console.log(await result);\r\n            }}\r\n          >\r\n            Vote!\r\n          </Button>\r\n        </div>\r\n        <Divider />\r\n        Your Address:\r\n        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />\r\n        <Divider />        \r\n      </div>\r\n\r\n      {/* Display a list of events */}\r\n      <Events\r\n        contracts={readContracts}\r\n        contractName=\"YourContract\"\r\n        eventName=\"SetPurpose\"\r\n        localProvider={localProvider}\r\n        mainnetProvider={mainnetProvider}\r\n        startBlock={1}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { utils } from \"ethers\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\n\r\nimport { Address, Balance, Events } from \"../components\";\r\n\r\nexport default function ExampleUI({\r\n  purpose,\r\n  address,\r\n  mainnetProvider,\r\n  localProvider,\r\n  yourLocalBalance,\r\n  price,\r\n  tx,\r\n  readContracts,\r\n  writeContracts,\r\n}) {\r\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n      <div style={{ margin: 32 }}>\r\n        <h1>Ballot Num of Candidates{\" \"}</h1>\r\n        <h3>Candidate 1 = 1</h3>\r\n        <h3>Candidate 2 = 2</h3>\r\n        <h3>Candidate 3 = 3</h3>\r\n        <h3>Candidate 4 = 4</h3>\r\n\r\n      </div>\r\n    </div>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\r\n        <h2>Enter the Ballot number.:</h2>\r\n        <Divider />\r\n        <div style={{ margin: 8 }}>\r\n          <Input\r\n            onChange={e => {\r\n              setNewPurpose(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            style={{ marginTop: 8 }}\r\n            onClick={async () => {\r\n              /* look how you call setPurpose on your contract: */\r\n              /* notice how you pass a call back for tx updates too */\r\n              const result = tx(writeContracts.YourContract.setPurpose(newPurpose), update => {\r\n                console.log(\"📡 Transaction Update:\", update);\r\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\r\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\r\n                  console.log(\r\n                    \" ⛽️ \" +\r\n                      update.gasUsed +\r\n                      \"/\" +\r\n                      (update.gasLimit || update.gas) +\r\n                      \" @ \" +\r\n                      parseFloat(update.gasPrice) / 1000000000 +\r\n                      \" gwei\",\r\n                  );\r\n                }\r\n              });\r\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\r\n              console.log(await result);\r\n            }}\r\n          >\r\n            Vote!\r\n          </Button>\r\n        </div>\r\n        <Divider />\r\n        Your Address:\r\n        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />\r\n        <Divider />        \r\n      </div>\r\n\r\n      {/*\r\n        📑 Maybe display a list of events?\r\n          (uncomment the event and emit line in YourContract.sol! )\r\n      */}\r\n      <Events\r\n        contracts={readContracts}\r\n        contractName=\"YourContract\"\r\n        eventName=\"SetPurpose\"\r\n        localProvider={localProvider}\r\n        mainnetProvider={mainnetProvider}\r\n        startBlock={1}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport { Button, Input, Table, Typography } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport GraphiQL from \"graphiql\";\r\nimport \"graphiql/graphiql.min.css\";\r\nimport fetch from \"isomorphic-fetch\";\r\nimport React, { useState } from \"react\";\r\nimport { Address } from \"../components\";\r\n\r\nconst highlight = {\r\n  marginLeft: 4,\r\n  marginRight: 8,\r\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\r\n  borderRadius: 4,\r\n  fontWeight: \"bolder\",\r\n};\r\n\r\nfunction Subgraph(props) {\r\n  function graphQLFetcher(graphQLParams) {\r\n    return fetch(props.subgraphUri, {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(graphQLParams),\r\n    }).then(response => response.json());\r\n  }\r\n\r\n  const EXAMPLE_GRAPHQL = `\r\n  {\r\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\r\n      id\r\n      purpose\r\n      createdAt\r\n      sender {\r\n        id\r\n      }\r\n    }\r\n    senders {\r\n      id\r\n      address\r\n      purposeCount\r\n    }\r\n  }\r\n  `;\r\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\r\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\r\n\r\n  const purposeColumns = [\r\n    {\r\n      title: \"Purpose\",\r\n      dataIndex: \"purpose\",\r\n      key: \"purpose\",\r\n    },\r\n    {\r\n      title: \"Sender\",\r\n      key: \"id\",\r\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\r\n    },\r\n    {\r\n      title: \"createdAt\",\r\n      key: \"createdAt\",\r\n      dataIndex: \"createdAt\",\r\n      render: d => new Date(d * 1000).toISOString(),\r\n    },\r\n  ];\r\n\r\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\r\n\r\n  const deployWarning = (\r\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        You will find that parsing/tracking events with the{\" \"}\r\n        <span className=\"highlight\" style={highlight}>\r\n          useEventListener\r\n        </span>{\" \"}\r\n        hook becomes a chore for every new project.\r\n      </div>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        Instead, you can use{\" \"}\r\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          The Graph\r\n        </a>{\" \"}\r\n        with 🏗 scaffold-eth (\r\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          learn more\r\n        </a>\r\n        ):\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>⛓️</span>\r\n        Make sure your local chain is running first:\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn chain\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚮</span>\r\n        Clean up previous data, if there is any:\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn clean-graph-node\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        Spin up a local graph node by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn run-graph-node\r\n        </span>\r\n        <span style={{ marginLeft: 4 }}>\r\n          {\" \"}\r\n          (requires{\" \"}\r\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {\" \"}\r\n            Docker\r\n          </a>\r\n          ){\" \"}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📝</span>\r\n        Create your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-create-local\r\n        </span>\r\n        (only required once!)\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        Deploy your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-ship-local\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🖍️</span>\r\n        Edit your <b>local subgraph</b> in\r\n        <span className=\"highlight\" style={highlight}>\r\n          packages/subgraph/src\r\n        </span>\r\n        (learn more about subgraph definition{\" \"}\r\n        <a\r\n          href=\"https://thegraph.com/docs/en/developer/define-subgraph-hosted/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          here\r\n        </a>\r\n        )\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🤩</span>\r\n        Deploy your <b>contracts and your subgraph</b> in one go by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn deploy-and-graph\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\r\n        <div style={{ margin: 32, textAlign: \"right\" }}>\r\n          <Input\r\n            onChange={e => {\r\n              setNewPurpose(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={() => {\r\n              console.log(\"newPurpose\", newPurpose);\r\n              /* look how you call setPurpose on your contract: */\r\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\r\n            }}\r\n          >\r\n            Set Purpose\r\n          </Button>\r\n        </div>\r\n\r\n        {data ? (\r\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\r\n        ) : (\r\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\r\n        )}\r\n\r\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\r\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ padding: 64 }}>...</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Subgraph;\r\n","import { Button, Col, Menu, Row } from \"antd\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  // useOnBlock,\r\n  useUserProviderAndSigner,\r\n} from \"eth-hooks\";\r\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport {\r\n  Account,\r\n  Contract,\r\n  Faucet,\r\n  GasGauge,\r\n  Header,\r\n  Ramp,\r\n  ThemeSwitch,\r\n  NetworkDisplay,\r\n  FaucetHint,\r\n  NetworkSwitch,\r\n} from \"./components\";\r\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\r\nimport externalContracts from \"./contracts/external_contracts\";\r\n// contracts\r\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\r\nimport { getRPCPollTime, Transactor, Web3ModalSetup } from \"./helpers\";\r\nimport { Home, ExampleUI, Hints, Subgraph } from \"./views\";\r\nimport { useStaticJsonRPC, useGasPrice } from \"./hooks\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, goerli, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = false;\r\nconst NETWORKCHECK = true;\r\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\r\nconst USE_NETWORK_SELECTOR = false;\r\n\r\nconst web3Modal = Web3ModalSetup();\r\n\r\n// 🛰 providers\r\nconst providers = [\r\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\r\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\r\n  \"https://rpc.scaffoldeth.io:48544\",\r\n];\r\n\r\nfunction App(props) {\r\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\r\n  // reference './constants.js' for other networks\r\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"goerli\"];\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\r\n  const location = useLocation();\r\n\r\n  const targetNetwork = NETWORKS[selectedNetwork];\r\n\r\n  // 🔭 block explorer URL\r\n  const blockExplorer = targetNetwork.blockExplorer;\r\n\r\n  // load all your providers\r\n  const localProvider = useStaticJsonRPC([\r\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\r\n  ]);\r\n\r\n  const mainnetProvider = useStaticJsonRPC(providers, localProvider);\r\n\r\n  // Sensible pollTimes depending on the provider you are using\r\n  const localProviderPollingTime = getRPCPollTime(localProvider);\r\n  const mainnetProviderPollingTime = getRPCPollTime(mainnetProvider);\r\n\r\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\r\n\r\n  // 🛰 providers\r\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\r\n      await injectedProvider.provider.disconnect();\r\n    }\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  };\r\n\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider, mainnetProviderPollingTime);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"FastGasPrice\", localProviderPollingTime);\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\r\n  const userSigner = userProviderAndSigner.signer;\r\n\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (userSigner) {\r\n        const newAddress = await userSigner.getAddress();\r\n        setAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [userSigner]);\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userSigner, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n  const yourMainnetBalance = useBalance(mainnetProvider, address, mainnetProviderPollingTime);\r\n\r\n  // const contractConfig = useContractConfig();\r\n\r\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider, contractConfig);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\r\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\r\n\r\n  // If you want to call a function on a new block\r\n  // useOnBlock(mainnetProvider, () => {\r\n  //   console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\r\n  // });\r\n\r\n  // Then read your DAI balance like:\r\n  const myMainnetDAIBalance = useContractReader(\r\n    mainnetContracts,\r\n    \"DAI\",\r\n    \"balanceOf\",\r\n    [\"0x34aA3F359A9D614239015126635CE7732c18fDF3\"],\r\n    mainnetProviderPollingTime,\r\n  );\r\n\r\n  // keep track of a variable from the contract in the local React state:\r\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\", [], localProviderPollingTime);\r\n\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\", addressFromENS)\r\n  */\r\n\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      yourMainnetBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\r\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\r\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    yourMainnetBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetContracts,\r\n    localChainId,\r\n    myMainnetDAIBalance,\r\n  ]);\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    //const provider = await web3Modal.connect();\r\n    const provider = await web3Modal.requestProvider();\r\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", chainId => {\r\n      console.log(`chain changed to ${chainId}! updating providers`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`account changed!`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n    // eslint-disable-next-line\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n    //automatically connect if it is a safe app\r\n    const checkSafeApp = async () => {\r\n      if (await web3Modal.isSafeApp()) {\r\n        loadWeb3Modal();\r\n      }\r\n    };\r\n    checkSafeApp();\r\n  }, [loadWeb3Modal]);\r\n\r\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* ✏️ Edit the header and change the title to your project name */}\r\n      <Header>\r\n        {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n        <div style={{ position: \"relative\", display: \"flex\", flexDirection: \"column\" }}>\r\n          <div style={{ display: \"flex\", flex: 1 }}>\r\n            {USE_NETWORK_SELECTOR && (\r\n              <div style={{ marginRight: 20 }}>\r\n                <NetworkSwitch\r\n                  networkOptions={networkOptions}\r\n                  selectedNetwork={selectedNetwork}\r\n                  setSelectedNetwork={setSelectedNetwork}\r\n                />\r\n              </div>\r\n            )}\r\n            <Account\r\n              useBurner={USE_BURNER_WALLET}\r\n              address={address}\r\n              localProvider={localProvider}\r\n              userSigner={userSigner}\r\n              mainnetProvider={mainnetProvider}\r\n              price={price}\r\n              web3Modal={web3Modal}\r\n              loadWeb3Modal={loadWeb3Modal}\r\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              blockExplorer={blockExplorer}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Header>\r\n      {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\r\n        <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\r\n      )}\r\n      <NetworkDisplay\r\n        NETWORKCHECK={NETWORKCHECK}\r\n        localChainId={localChainId}\r\n        selectedChainId={selectedChainId}\r\n        targetNetwork={targetNetwork}\r\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\r\n      />\r\n      <Menu style={{ textAlign: \"center\", marginTop: 20 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\r\n        <Menu.Item key=\"/\">\r\n          <Link to=\"/\">Home</Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"/exampleui\">\r\n          <Link to=\"/exampleui\">Vote</Link>\r\n        </Menu.Item>\r\n\r\n      </Menu>\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\r\n          <Home yourLocalBalance={yourLocalBalance} readContracts={readContracts} />\r\n        </Route>\r\n        <Route exact path=\"/debug\">\r\n          {/*\r\n                🎛 this scaffolding is full of commonly used components\r\n                this <Contract/> component will automatically parse your \r\n                and give you a form to interact with it locally\r\n            */}\r\n\r\n          <Contract\r\n            name=\"YourContract\"\r\n            price={price}\r\n            signer={userSigner}\r\n            provider={localProvider}\r\n            address={address}\r\n            blockExplorer={blockExplorer}\r\n            contractConfig={contractConfig}\r\n          />\r\n        </Route>\r\n        <Route path=\"/hints\">\r\n          <Hints\r\n            address={address}\r\n            yourLocalBalance={yourLocalBalance}\r\n            mainnetProvider={mainnetProvider}\r\n            price={price}\r\n          />\r\n        </Route>\r\n        <Route path=\"/exampleui\">\r\n          <ExampleUI\r\n            address={address}\r\n            userSigner={userSigner}\r\n            mainnetProvider={mainnetProvider}\r\n            localProvider={localProvider}\r\n            yourLocalBalance={yourLocalBalance}\r\n            price={price}\r\n            tx={tx}\r\n            writeContracts={writeContracts}\r\n            readContracts={readContracts}\r\n            purpose={purpose}\r\n          />\r\n        </Route>\r\n        <Route path=\"/mainnetdai\">\r\n          <Contract\r\n            name=\"DAI\"\r\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\r\n            signer={userSigner}\r\n            provider={mainnetProvider}\r\n            address={address}\r\n            blockExplorer=\"https://etherscan.io/\"\r\n            contractConfig={contractConfig}\r\n            chainId={1}\r\n          />\r\n        </Route>\r\n        <Route path=\"/subgraph\">\r\n          <Subgraph\r\n            subgraphUri={props.subgraphUri}\r\n            tx={tx}\r\n            writeContracts={writeContracts}\r\n            mainnetProvider={mainnetProvider}\r\n          />\r\n        </Route>\r\n      </Switch>\r\n\r\n      <ThemeSwitch />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import axios from \"axios\";\r\nimport { usePoller } from \"eth-hooks\";\r\nimport { useState } from \"react\";\r\nimport { ETHERSCAN_KEY } from \"../constants\";\r\n\r\nexport default function useGasPrice(targetNetwork, speed, pollTime = 39999) {\r\n  const [gasPrice, setGasPrice] = useState();\r\n  const loadGasPrice = async () => {\r\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\r\n      setGasPrice(targetNetwork.gasPrice);\r\n    } else {\r\n      axios\r\n        .get(\"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=\" + ETHERSCAN_KEY)\r\n        .then(response => {\r\n          console.log(\"response gas: \", response);\r\n          const newGasPrice = response.data.result[speed || \"FastGasPrice\"] * 1000000000;\r\n          if (newGasPrice !== gasPrice) {\r\n            setGasPrice(newGasPrice);\r\n          }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n  };\r\n\r\n  usePoller(loadGasPrice, 39999);\r\n  return gasPrice;\r\n}\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <BrowserRouter>\r\n        <App subgraphUri={subgraphUri} />\r\n      </BrowserRouter>\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","const ERC20ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        name: \"balance\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"fallback\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n];\r\nconst DAIABI = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"chainId_\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: true,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes4\",\r\n        name: \"sig\",\r\n        type: \"bytes4\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg1\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg2\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"bytes\",\r\n        name: \"data\",\r\n        type: \"bytes\",\r\n      },\r\n    ],\r\n    name: \"LogNote\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"DOMAIN_SEPARATOR\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"PERMIT_TYPEHASH\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"deny\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"move\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"nonces\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"holder\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"nonce\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"expiry\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"allowed\",\r\n        type: \"bool\",\r\n      },\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"v\",\r\n        type: \"uint8\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"r\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"s\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"pull\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"push\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"rely\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"version\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"wards\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\r\nmodule.exports = {\r\n  1: {\r\n    contracts: {\r\n      DAI: {\r\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n        abi: DAIABI,\r\n      },\r\n      UNI: {\r\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\r\n        abi: ERC20ABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n"],"sourceRoot":""}